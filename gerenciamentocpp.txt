#include <iostream>
#include <string>
#include <fstream>
#include <cctype>
#include <algorithm>
#include <ctype.h>
#include "gerenciamento.h"

using namespace std;

//Abrir Arquivo de Salvamento do CRUD
void CRUD::AbrirArquivo() {
    string linha;
    ifstream meu_arquivo("gerenciamento.txt");
    if (meu_arquivo.is_open()) {
        int i = 0;
        linha.length();
        while (getline(meu_arquivo, linha)) {
            ItemID[i] = linha.substr(0, 4);
            ItemName[i] = linha.substr(4, 1 - 4);
            i++;
        }
    }
    else {
        cout << "Incapaz de abrir o Arquivo" << endl;
    }
}

//Salvar CRUD
void CRUD::SaveToFile() {
    ofstream meu_arquivo;
    meu_arquivo.open("gerenciamento.txt");

    for (int i = 0; i < qtd_mercadorias; i++) {
        if (ItemID[i] == "\0") {
            break;
        }

        else {
            meu_arquivo << ItemID[i] + "," + ItemName[i] << endl;
        }
    }
}

//Opção 1 - Inserir Item
void CRUD::InserirItem() {
    string nome;
    string id_item;

    cout << "ID do Item: ";

    cin.ignore();
      
    getline(std::cin, id_item);
    cout << "Nome do Item: ";
    getline(std::cin, nome);

    for (int i = 0; i < qtd_mercadorias; i++) {
        if (ItemID[i].empty()) {
        ItemID[i] = id_item;
        ItemName[i] = nome;
        break;
        }
    }
}

//Opção 2 - Mostrar Estoque
void CRUD::Estoque() {

    system("CLS");
    cout << "Estoque" << endl;
    cout << "==========================================" << endl;

    int counter = 0;
    cout << " No.  |   ID   |         NOME        " << endl << "------------------------------------------\n";
    for (int i = 0; i < qtd_mercadorias; i++) {
        if (ItemID[i] != "\0") {
            counter++;
            cout << " " << counter << "        " << ItemID[i] << "            " << ItemName[i] << endl;
        }
    }

    if (counter == 0) {
        cout << "Estoque Vazio!" << endl;
    }

    cout << "=========================================" << endl;
}

//Opção 3 - Procurar Item
void CRUD::ProcurarItem(string pesquisa, int escolha) {

    //Procura por ID
    if(escolha == 1) {
        system("CLS");
        cout << "Produtos Correspondentes à Pesquisa" << endl;
        cout << "==========================================" << endl;
        int counter = 0;

        for (int i = 0; i < qtd_mercadorias; i++) {

            if (ItemID[i] == pesquisa) {
                counter++;
                cout << "   " << counter << "    " << ItemID[i] << "             " << ItemName[i] << endl;
                cout << "==========================================" << endl;
                break;
            }

            if (counter == 0) {
                cout << "ID não encontrado!" << endl;
            }
        }
    }

    //Procura por Nome
    else if(escolha == 2) {
        system("CLS");
        cout << "Produtos Correspondentes à Pesquisa" << endl;
        cout << "==========================================" << endl;
        int counter = 0;

        for (int i = 0; i < qtd_mercadorias; i++) {   
            //Modificação para letras minúsculas
            string item_name_comparation = ItemName[i];
            for (char& ItemName_c : item_name_comparation) {
                ItemName_c = tolower(ItemName_c);
            }

            for (char& pesquisa_c : pesquisa) {
                pesquisa_c = tolower(pesquisa_c);
            }
                
            //Comparação
            auto it = find(item_name_comparation.begin(), item_name_comparation.end(), pesquisa[0]);
            if (it != item_name_comparation.end()) {
                counter++;
                cout << "   " << counter << "    " << ItemID[i] << "             " << item_name_comparation << endl;
                cout << "==========================================" << endl;
                break;
            }

            if (counter == 0) {
                cout << "Nenhum produto encontrado!" << endl;
            }
        }
    }
}

//Opção 4 - Atualizar Item
void CRUD::AtualizarItem(string pesquisa, int escolha) {

    //Procura por ID
    if(escolha == 1) {
        string new_name;
        int counter = 0;

        for (int i = 0; i < qtd_mercadorias; i++) {
            if (ItemID[i] == pesquisa) {
                counter++;
                cout << "Novo Nome do Item: ";
                getline(cin, new_name);

                ItemName[i] = new_name;

                cout << "\n" << "Atualização Completa!\n\n";
                break;
            }
        }

        if (counter == 0) {
            cout << "ID não encontrado!" << endl;
        }
    }

    //Procura por Nome
    else if(escolha == 2) {
        string new_name;
        int counter = 0;

        for (int i = 0; i < qtd_mercadorias; i++) {   
            //Comparação
            string item_name_comparation = ItemName[i];
            auto it = find(item_name_comparation.begin(), item_name_comparation.end(), pesquisa[0]);

            if (it != item_name_comparation.end()) {
                counter++;
                cout << "Novo Nome do Item: ";
                getline(cin, new_name);

                ItemName[i] = new_name;

                cout << "\n"
                    << "Atualização Completa!\n\n";
                break;
            }

            if (counter == 0) {
                cout << "Nenhum produto encontrado!" << endl;
            }
        }
    }
}

//Opção 5 - Deletar Item
void CRUD::DeletarItem(string pesquisa, int escolha) {

    //Procura por ID
    if(escolha == 1) {
        int counter = 0;

        for (int i = 0; i < qtd_mercadorias; i++) {
                
            if (ItemID[i] == pesquisa) {
                counter++;

                ItemName[i] = "";
                ItemID[i] = "";

                cout << "Produto Deletado Completamente!\n\n";
                break;
            }

            if (counter == 0) {
                cout << "ID não encontrado!" << endl;
            }
        }
    }

    //Procura por Nome
    else if(escolha == 2) {
        int counter = 0;

        for (int i = 0; i < qtd_mercadorias; i++)
        {   
            //Comparação
            string item_name_comparation = ItemName[i];
            auto it = find(item_name_comparation.begin(), item_name_comparation.end(), pesquisa[0]);

            if (it != item_name_comparation.end()) {
                counter++;

                ItemName[i] = "";
                ItemID[i] = "";

                cout << "Produto Deletado Completamente!\n\n";
                break;
            }

            if (counter == 0)
            {
                cout << "Nenhum produto encontrado!" << endl;
            }
        }
    }
}
